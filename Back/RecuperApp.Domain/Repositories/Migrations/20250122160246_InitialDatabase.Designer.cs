// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RecuperApp.Domain.Repositories;

#nullable disable

namespace RecuperApp.Domain.Repositories.Migrations
{
    [DbContext(typeof(ReciplastkContext))]
    [Migration("20250122160246_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customerid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<string>("Cell")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cell");

                    b.Property<DateTime?>("ClientSince")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("clientsince");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("customertypeid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<bool?>("NeedsPickup")
                        .HasColumnType("boolean")
                        .HasColumnName("needspickup");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("CustomerId")
                        .HasName("pk_customers");

                    b.HasIndex("CustomerTypeId")
                        .HasDatabaseName("ix_customers_customertypeid");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customertypeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerTypeId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("CustomerTypeId")
                        .HasName("pk_customertypes");

                    b.ToTable("customertypes", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerTypeId = 1,
                            CreatedBy = "Seeder",
                            CreatedDate = new DateTime(2025, 1, 22, 10, 45, 45, 0, DateTimeKind.Unspecified),
                            Description = "Personas a los que les compro material",
                            IsActive = true,
                            Name = "Proveedor"
                        },
                        new
                        {
                            CustomerTypeId = 2,
                            CreatedBy = "Seeder",
                            CreatedDate = new DateTime(2025, 1, 22, 10, 45, 45, 0, DateTimeKind.Unspecified),
                            Description = "Personas a los que les vendo mi material ya procesado",
                            IsActive = true,
                            Name = "Cliente"
                        });
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employeeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateofbirth");

                    b.Property<DateTime>("DateOfJoin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateofjoin");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("documentnumber");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("password");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("username");

                    b.HasKey("EmployeeId")
                        .HasName("pk_employees");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_employees_roleid");

                    b.ToTable("employees", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            CreatedBy = "Seeder",
                            CreatedDate = new DateTime(2025, 1, 22, 10, 45, 45, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2025, 1, 22, 10, 45, 45, 0, DateTimeKind.Unspecified),
                            DateOfJoin = new DateTime(2025, 1, 22, 10, 45, 45, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "1234",
                            IsActive = true,
                            LastName = "Admin",
                            Name = "Super",
                            Password = "Admin123",
                            RoleId = 1,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("paymentid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employeeid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer")
                        .HasColumnName("totalprice");

                    b.Property<int>("TotalWeight")
                        .HasColumnType("integer")
                        .HasColumnName("totalweight");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("PaymentId")
                        .HasName("pk_payments");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_payments_employeeid");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentsDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("paymentsdetailid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentsDetailId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("paymentid");

                    b.Property<int>("ProductPrice")
                        .HasColumnType("integer")
                        .HasColumnName("productprice");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.Property<int?>("WeightControlDetailId")
                        .HasColumnType("integer")
                        .HasColumnName("weightcontroldetailid");

                    b.HasKey("PaymentsDetailId")
                        .HasName("pk_paymentdetails");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_paymentdetails_paymentid");

                    b.HasIndex("WeightControlDetailId")
                        .HasDatabaseName("ix_paymentdetails_weightcontroldetailid");

                    b.ToTable("paymentdetails", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.PayrollConfig", b =>
                {
                    b.Property<int>("PayrollConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payrollconfigid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PayrollConfigId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employeeid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsCurrentPrice")
                        .HasColumnType("boolean")
                        .HasColumnName("iscurrentprice");

                    b.Property<double>("PricePerKilo")
                        .HasColumnType("double precision")
                        .HasColumnName("priceperkilo");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("productid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("PayrollConfigId")
                        .HasName("pk_payrollconfigs");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_payrollconfigs_employeeid");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_payrollconfigs_productid");

                    b.ToTable("payrollconfigs", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.PriceType", b =>
                {
                    b.Property<int>("PriceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pricetypeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PriceTypeId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("PriceTypeId")
                        .HasName("pk_pricetypes");

                    b.ToTable("pricetypes", (string)null);

                    b.HasData(
                        new
                        {
                            PriceTypeId = 1,
                            CreatedBy = "Seeder",
                            CreatedDate = new DateTime(2025, 1, 22, 10, 45, 45, 0, DateTimeKind.Unspecified),
                            Description = "Precios de compra de los productos. Material que ingresa a la bodega y el valor que se paga a los proveedores.",
                            IsActive = true,
                            Name = "Compra"
                        },
                        new
                        {
                            PriceTypeId = 2,
                            CreatedBy = "Seeder",
                            CreatedDate = new DateTime(2025, 1, 22, 10, 45, 45, 0, DateTimeKind.Unspecified),
                            Description = "Precios de venta de los productos. Material que sale de la bodega y el valor que se le cobra a los clientes.",
                            IsActive = true,
                            Name = "Venta"
                        });
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("productid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsSubtype")
                        .HasColumnType("boolean")
                        .HasColumnName("issubtype");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("shortname");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("ProductId")
                        .HasName("pk_products");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_products_parentid");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.ProductPrice", b =>
                {
                    b.Property<int>("ProductPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("productpriceid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductPriceId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customerid");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employeeid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsCurrentPrice")
                        .HasColumnType("boolean")
                        .HasColumnName("iscurrentprice");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int>("PricetypeId")
                        .HasColumnType("integer")
                        .HasColumnName("pricetypeid");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("productid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("ProductPriceId")
                        .HasName("pk_productprices");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_productprices_customerid");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_productprices_employeeid");

                    b.HasIndex("PricetypeId")
                        .HasDatabaseName("ix_productprices_pricetypeid");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_productprices_productid");

                    b.ToTable("productprices", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Remaining", b =>
                {
                    b.Property<int>("RemainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("remainingid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RemainingId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("productid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<int>("WeightControlId")
                        .HasColumnType("integer")
                        .HasColumnName("weightcontrolid");

                    b.HasKey("RemainingId")
                        .HasName("pk_remainings");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_remainings_productid");

                    b.HasIndex("WeightControlId")
                        .HasDatabaseName("ix_remainings_weightcontrolid");

                    b.ToTable("remainings", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("RoleId")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedBy = "Seeder",
                            CreatedDate = new DateTime(2025, 1, 22, 10, 45, 45, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Shipment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("shipmentid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipmentId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customerid");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employeeid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("iscomplete");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("ispaid");

                    b.Property<DateTime>("ShipmentEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("shipmentenddate");

                    b.Property<DateTime>("ShipmentStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("shipmentstartdate");

                    b.Property<int>("ShipmenttypeId")
                        .HasColumnType("integer")
                        .HasColumnName("shipmenttypeid");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("totalprice");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("ShipmentId")
                        .HasName("pk_shipments");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_shipments_customerid");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_shipments_employeeid");

                    b.HasIndex("ShipmenttypeId")
                        .HasDatabaseName("ix_shipments_shipmenttypeid");

                    b.ToTable("shipments", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.ShipmentDetail", b =>
                {
                    b.Property<int>("ShipmentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("shipmentdetailid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipmentDetailId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("productid");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("productprice");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("shipmentdate");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("integer")
                        .HasColumnName("shipmentid");

                    b.Property<double>("Subtotal")
                        .HasColumnType("double precision")
                        .HasColumnName("subtotal");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("ShipmentDetailId")
                        .HasName("pk_shipmentdetails");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_shipmentdetails_productid");

                    b.HasIndex("ShipmentId")
                        .HasDatabaseName("ix_shipmentdetails_shipmentid");

                    b.ToTable("shipmentdetails", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.ShipmentType", b =>
                {
                    b.Property<int>("ShipmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("shipmenttypeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipmentTypeId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("ShipmentTypeId")
                        .HasName("pk_shipmenttypes");

                    b.ToTable("shipmenttypes", (string)null);

                    b.HasData(
                        new
                        {
                            ShipmentTypeId = 1,
                            CreatedBy = "Seeder",
                            CreatedDate = new DateTime(2025, 1, 22, 10, 45, 45, 0, DateTimeKind.Unspecified),
                            Description = "Material que ingresa a la bodega enviado por los proveedores. Compras",
                            IsActive = true,
                            Name = "Ingreso"
                        },
                        new
                        {
                            ShipmentTypeId = 2,
                            CreatedBy = "Seeder",
                            CreatedDate = new DateTime(2025, 1, 22, 10, 45, 45, 0, DateTimeKind.Unspecified),
                            Description = "Material que ingresa a la bodega enviado por los proveedores. Ventas",
                            IsActive = true,
                            Name = "Salida"
                        });
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.WeightControl", b =>
                {
                    b.Property<int>("WeightControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("weightcontrolid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WeightControlId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateend");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datestart");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employeeid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("ispaid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.Property<int>("WeightControlTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("weightcontroltypeid");

                    b.HasKey("WeightControlId")
                        .HasName("pk_weightcontrols");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_weightcontrols_employeeid");

                    b.HasIndex("WeightControlTypeId")
                        .HasDatabaseName("ix_weightcontrols_weightcontroltypeid");

                    b.ToTable("weightcontrols", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.WeightControlDetail", b =>
                {
                    b.Property<int>("WeightControlDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("weightcontroldetailid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WeightControlDetailId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("productid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<int>("WeightControlId")
                        .HasColumnType("integer")
                        .HasColumnName("weightcontrolid");

                    b.HasKey("WeightControlDetailId")
                        .HasName("pk_weightcontroldetails");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_weightcontroldetails_productid");

                    b.HasIndex("WeightControlId")
                        .HasDatabaseName("ix_weightcontroldetails_weightcontrolid");

                    b.ToTable("weightcontroldetails", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.WeightControlType", b =>
                {
                    b.Property<int>("WeightControlTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("weightcontroltypeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WeightControlTypeId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updateddate");

                    b.HasKey("WeightControlTypeId")
                        .HasName("pk_weightcontroltypes");

                    b.ToTable("weightcontroltypes", (string)null);
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Customer", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customers_customertypes_customertypeid");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Employee", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_employees_roles_roleid");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Payment", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_employees_employeeid");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.PaymentDetail", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_paymentdetails_payments_paymentid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.WeightControlDetail", "WeightControlDetail")
                        .WithMany()
                        .HasForeignKey("WeightControlDetailId")
                        .HasConstraintName("fk_paymentdetails_weightcontroldetails_weightcontroldetailid");

                    b.Navigation("Payment");

                    b.Navigation("WeightControlDetail");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.PayrollConfig", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payrollconfigs_employees_employeeid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payrollconfigs_products_productid");

                    b.Navigation("Employee");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Product", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Product", "Parent")
                        .WithMany("SubProducts")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_products_products_parentid");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.ProductPrice", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_productprices_customers_customerid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_productprices_employees_employeeid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.PriceType", "Pricetype")
                        .WithMany()
                        .HasForeignKey("PricetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_productprices_pricetypes_pricetypeid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_productprices_products_productid");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Pricetype");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Remaining", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_remainings_products_productid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.WeightControl", "WeightControl")
                        .WithMany()
                        .HasForeignKey("WeightControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_remainings_weightcontrols_weightcontrolid");

                    b.Navigation("Product");

                    b.Navigation("WeightControl");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Shipment", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipments_customers_customerid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipments_employees_employeeid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.ShipmentType", "Shipmenttype")
                        .WithMany()
                        .HasForeignKey("ShipmenttypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipments_shipmenttypes_shipmenttypeid");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Shipmenttype");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.ShipmentDetail", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipmentdetails_products_productid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipmentdetails_shipments_shipmentid");

                    b.Navigation("Product");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.WeightControl", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weightcontrols_employees_employeeid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.WeightControlType", "WeightControlType")
                        .WithMany()
                        .HasForeignKey("WeightControlTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weightcontrols_weightcontroltypes_weightcontroltypeid");

                    b.Navigation("Employee");

                    b.Navigation("WeightControlType");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.WeightControlDetail", b =>
                {
                    b.HasOne("RecuperApp.Domain.Models.EntityModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weightcontroldetails_products_productid");

                    b.HasOne("RecuperApp.Domain.Models.EntityModels.WeightControl", "WeightControl")
                        .WithMany()
                        .HasForeignKey("WeightControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weightcontroldetails_weightcontrols_weightcontrolid");

                    b.Navigation("Product");

                    b.Navigation("WeightControl");
                });

            modelBuilder.Entity("RecuperApp.Domain.Models.EntityModels.Product", b =>
                {
                    b.Navigation("SubProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
